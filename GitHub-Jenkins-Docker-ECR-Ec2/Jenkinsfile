pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '**<YOUR_AWS_ACCOUNT_ID>**'
        AWS_REGION = '**<YOUR_AWS_REGION>**'
        ECR_REPO = 'project-a/github-jenkins-docker-ecr-ec2'
        IMAGE_TAG = 'v1'
        DOCKER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
        EC2_INSTANCE_ID = '**<YOUR_EC2_ID>**'
    }

    stages {
        stage('Clone Repo') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PAT')]) {
                    git url: "https://${GIT_USERNAME}:${GIT_PAT}@github.com/${GIT_USERNAME}/Jenkins-ECR-Ec2.git", branch: 'main'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${ECR_REPO}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                sh """
                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                """
            }
        }

        stage('Push to ECR') {
            steps {
                sh """
                aws ecr describe-repositories --repository-names ${ECR_REPO} || aws ecr create-repository --repository-name ${ECR_REPO}
                docker tag ${ECR_REPO}:${IMAGE_TAG} ${DOCKER_IMAGE}
                docker push ${DOCKER_IMAGE}
                """
            }
        }

        stage('Get EC2 Public DNS') {
            steps {
                script {
                    env.EC2_PUBLIC_DNS = sh(
                        script: """
                        aws ec2 describe-instances --instance-ids ${EC2_INSTANCE_ID} \
                        --region ${AWS_REGION} \
                        --query "Reservations[0].Instances[0].PublicDnsName" \
                        --output text
                        """,
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ubuntu@${EC2_PUBLIC_DNS} << 'ENDSSH'
                            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                            sudo docker pull ${DOCKER_IMAGE}
                            if sudo docker ps -q -f name=myproject; then
                                sudo docker stop myproject
                                sleep 15
                                sudo docker rm myproject
                            fi
                            sudo docker run -d -p 1000:1000 --name myproject ${DOCKER_IMAGE}
ENDSSH
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful! App running at: http://${EC2_PUBLIC_DNS}:1000"
        }
        failure {
            echo "Deployment failed. Check the Jenkins logs for more info."
        }
    }
}
